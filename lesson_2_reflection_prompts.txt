What happens when you initialize a repository? Why do you need to do it?
当你新建一个代码仓库时发生了什么?你为何要这样做？
产生一个.git的文件，这个文件会记录版本控制信息。 为了版本控制呀！

How is the staging area different from the working directory and the repository?
What value do you think it offers?
暂存区与工作目录以及代码仓库有何不同？这有何价值？
暂存区可以暂时保存你准备好提交的文件，然后一次性地提交至代码仓库，简单又轻松。工作目录中的文件，就是我正在编写代码的地方，我还没有准备好提交。而代码仓库就是已经可以存放的代码，已经完工的代码。这样划分很清晰。

How can you use the staging area to make sure you have one commit per logical
change?
每次把工作空间中一次逻辑操纵中涉及的所以文件都提交至暂存空间，并且一次提交至代码仓库中
What are some situations when branches would be helpful in keeping your history
organized? How would branches help?
如果希望对主分支进行修改，但有不想影响主分支时，可以使用分支。比如，添加一个实验性的功能，或者开发一个其他语言。分支能够让我自由地去探索新功能，而不用担心主分支。在适当的时候还可以与主分支合并。
How do the diagrams help you visualize the branch structure?
树形图可以方便的查看各个分支，了解不同的功能。
What is the result of merging two branches together? Why do we represent it in
the diagram the way we do?
不同的分支由不同的人负责，两个分支可以同时进行，就像两个功能同时开发，到时后在合并到一起，有助于提高工作效率。关于图表我有一个疑问，我输入git log --graph --oneline的结果和视频中的不同，不同点为视频中有红色和绿色的线表示分支，而我的没有，这个功能很不错，可以显示出两分支分离合并的情况。
What are the pros and cons of Git's automatic merging vs. always doing merges
manually?
自动合并：快速，效率高。但需要解决合并之间的冲突。
而手动合并：缓慢，耗费时间。但是能够更好地解决冲突，虽然需要大量的人工。